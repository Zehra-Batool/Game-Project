/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/app.ts":
/*!********************!*\
  !*** ./src/app.ts ***!
  \********************/
/***/ (() => {

eval("\nlet board;\nlet score = 0;\nlet rows = 4;\nlet columns = 4;\nwindow.onload = function () {\n    setGame();\n};\nfunction setGame() {\n    board = [\n        [0, 0, 0, 0],\n        [0, 0, 0, 0],\n        [0, 0, 0, 0],\n        [0, 0, 0, 0]\n    ];\n    for (let r = 0; r < rows; r++) {\n        for (let c = 0; c < columns; c++) {\n            let tile = document.createElement('div');\n            tile.id = r.toString() + \"-\" + c.toString();\n            let num = board[r][c];\n            updateTile(tile, num);\n            document.getElementById(\"board\").append(tile);\n        }\n    }\n    setTwo();\n    setTwo();\n}\nfunction hasEmptyTile() {\n    for (let r = 0; r < rows; r++) {\n        for (let c = 0; c < columns; c++) {\n            if (board[r][c] == 0) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\nfunction setTwo() {\n    if (!hasEmptyTile()) {\n        return;\n    }\n    let found = false;\n    while (!found) {\n        let r = Math.floor(Math.random() * rows);\n        let c = Math.floor(Math.random() * columns);\n        if (board[r][c] == 0) {\n            board[r][c] = 2;\n            let tile = document.getElementById(r.toString() + \"-\" + c.toString());\n            tile.innerText = \"2\";\n            tile.classList.add(\"x2\");\n            found = true;\n        }\n    }\n}\nfunction updateTile(tile, num) {\n    tile.innerText = \"\";\n    tile.classList.value = \"\";\n    tile.classList.add(\"tile\");\n    if (num > 0) {\n        tile.innerText = num;\n        if (num <= 4096) {\n            tile.classList.add(\"x\" + num.toString());\n        }\n        else {\n            tile.classList.add(\"x8192\");\n        }\n    }\n}\ndocument.addEventListener(\"keyup\", (e) => {\n    if (e.code == \"ArrowLeft\") {\n        slideLeft();\n        setTwo();\n    }\n    else if (e.code == \"ArrowRight\") {\n        slideRight();\n        setTwo();\n    }\n    else if (e.code == \"ArrowUp\") {\n        slideUp();\n        setTwo();\n    }\n    else if (e.code == \"ArrowDown\") {\n        slideDown();\n        setTwo();\n    }\n    document.getElementById(\"score\").innerText = score.toString();\n});\nfunction filterZero(row) {\n    return row.filter((num) => num != 0);\n}\nfunction slide(row) {\n    // [0,2,2,2]\n    row = filterZero(row); //[2,2,2]\n    //slide\n    for (let i = 0; i < row.length - 1; i++) {\n        //check every 2\n        if (row[i] == row[i + 1]) {\n            row[i] *= 2;\n            row[i + 1] = 0;\n            score += row[i];\n        }\n    }\n    row = filterZero(row); //[4,2]\n    //add zero like [4,2,0,0]\n    while (row.length < columns) {\n        row.push(0);\n    }\n    return row;\n}\nfunction slideLeft() {\n    for (let r = 0; r < rows; r++) {\n        let row = board[r];\n        row = slide(row);\n        board[r] = row;\n        for (let c = 0; c < columns; c++) {\n            let tile = document.getElementById(r.toString() + \"-\" + c.toString());\n            let num = board[r][c];\n            if (tile !== null) {\n                updateTile(tile, num);\n            }\n        }\n    }\n}\nfunction slideRight() {\n    for (let r = 0; r < rows; r++) {\n        let row = board[r];\n        row.reverse();\n        row = slide(row);\n        row.reverse();\n        board[r] = row;\n        for (let c = 0; c < columns; c++) {\n            let tile = document.getElementById(r.toString() + \"-\" + c.toString());\n            let num = board[r][c];\n            if (tile !== null) {\n                updateTile(tile, num);\n            }\n        }\n    }\n}\nfunction slideUp() {\n    for (let c = 0; c < columns; c++) {\n        let row = [board[0][c], board[1][c], board[2][c], board[3][c]];\n        row = slide(row);\n        board[0][c] = row[0];\n        board[1][c] = row[1];\n        board[2][c] = row[2];\n        board[3][c] = row[3];\n        for (let r = 0; r < rows; r++) {\n            let tile = document.getElementById(r.toString() + \"-\" + c.toString());\n            let num = board[r][c];\n            if (tile !== null) {\n                updateTile(tile, num);\n            }\n        }\n    }\n}\nfunction slideDown() {\n    for (let c = 0; c < columns; c++) {\n        let row = [board[0][c], board[1][c], board[2][c], board[3][c]];\n        row.reverse();\n        row = slide(row);\n        row.reverse();\n        board[0][c] = row[0];\n        board[1][c] = row[1];\n        board[2][c] = row[2];\n        board[3][c] = row[3];\n        for (let r = 0; r < rows; r++) {\n            let tile = document.getElementById(r.toString() + \"-\" + c.toString());\n            let num = board[r][c];\n            if (tile !== null) {\n                updateTile(tile, num);\n            }\n        }\n    }\n}\n///reset \nfunction resetGame() {\n    // Reset the board, score, and update the UI\n    board = Array.from({ length: rows }, () => Array(columns).fill(0));\n    score = 0;\n    for (let r = 0; r < rows; r++) {\n        for (let c = 0; c < columns; c++) {\n            let tile = document.getElementById(r.toString() + \"-\" + c.toString());\n            updateTile(tile, 0);\n        }\n    }\n    // Add new tiles to the board\n    setTwo();\n    setTwo();\n    // Update the score display\n    document.getElementById(\"score\").innerText = score.toString();\n}\nconst resetButton = document.getElementById(\"repeat\");\nresetButton.addEventListener(\"click\", resetGame);\nfunction hide() {\n    const popup = document.getElementById('popup');\n    if (popup) {\n        popup.classList.add('hidden');\n    }\n}\nfunction show() {\n    const popup = document.getElementById('popup');\n    if (popup) {\n        popup.classList.remove('hidden');\n    }\n}\nconst crossButton = document.getElementById('cross');\ncrossButton.addEventListener('click', hide);\nconst iBtn = document.getElementById('info');\niBtn.addEventListener('click', show);\n//win loose \nfunction isWin() {\n    for (const row of board) {\n        for (const tile of row) {\n            if (tile === 2048) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\nfunction isLoss() {\n    // Check if there are any empty tiles\n    if (hasEmptyTile()) {\n        return false;\n    }\n    // Check for adjacent matching tiles in rows\n    for (let r = 0; r < rows; r++) {\n        for (let c = 0; c < columns - 1; c++) {\n            if (board[r][c] === board[r][c + 1]) {\n                return false;\n            }\n        }\n    }\n    // Check for adjacent matching tiles in columns\n    for (let c = 0; c < columns; c++) {\n        for (let r = 0; r < rows - 1; r++) {\n            if (board[r][c] === board[r + 1][c]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\ndocument.addEventListener(\"keyup\", (e) => {\n    if (e.code == \"ArrowLeft\") {\n        slideLeft();\n        setTwo();\n        checkWinLoss();\n    }\n    else if (e.code == \"ArrowRight\") {\n        slideRight();\n        setTwo();\n        checkWinLoss();\n    }\n    else if (e.code == \"ArrowUp\") {\n        slideUp();\n        setTwo();\n        checkWinLoss();\n    }\n    else if (e.code == \"ArrowDown\") {\n        slideDown();\n        setTwo();\n        checkWinLoss();\n    }\n    document.getElementById(\"score\").innerText = score.toString();\n});\nfunction checkWinLoss() {\n    if (isWin()) {\n        console.log(\"Congratulations! You've won!\");\n        const pop = document.getElementById(\"popup-for-win\");\n        pop.addEventListener('click', function () {\n            pop.classList.remove(\"hidden\");\n        });\n    }\n    if (isLoss()) {\n        alert(\"Game over! You've lost.\");\n        const loose = document.getElementById(\"popup-for-loose\");\n        loose.addEventListener('click', function () {\n            loose.classList.remove(\"hidden\");\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/app.ts\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/app.ts"]();
/******/ 	
/******/ })()
;